package eu.dedalus.prescriptionvalidator;
import eu.dedalus.prescriptionmodel.CommonDataInterface;


//
// --------------  FUNCTIONS -------------------------------
//
function String decodeExemptionEconomic(String redCode){
    String code = "";
    switch(redCode){
		case "E10": code = "E"; break;
		case "E11": code = "F"; break;
		case "E12": code = "G"; break;
		case "E13": code = "H"; break;
		case "E14": code = "N"; break;		
		case "E00": code = "M"; break;
		case "E01": code = "L"; break;
		case "E02": code = "P"; break;
		case "E03": code = "Q"; break;
		case "E04": code = "R"; break;
		case "E20": code = "S"; break;
		case "E21": code = "T"; break;
		case "E22": code = "U"; break;
		case "E23": code = "V"; break;
		case "E24": code = "Z"; break;
		
		default:  code = ""; break;
	}
    return code;
}

function String exemptionCodeCombining(String patCode, String redCode){
	String code = patCode;
	while(code.length() < 5) {
		code += "0";
    }
	if(code.length() > 5) {
		code = code.substring(0, 5);
	}
	code += decodeExemptionEconomic(redCode);	
	
	return code;
}

function Exemption selectExemptionCriteria(Exemption current, Exemption toAdd){
	if(current == null || current.getWeight() < toAdd.getWeight()){
		return toAdd;
	}
	if(current.getWeight() == toAdd.getWeight() && current.isWithRestriction() && !toAdd.isWithRestriction() ){
		return toAdd;
	}
	return current;
}

function Boolean isExemptionOnProblem(String icd9Exemption, CommonDataInterface data){
	if(icd9Exemption == null || icd9Exemption.isEmpty()) {
		return false;
	}
	if(data.getDiagnosis() == null || data.getDiagnosis().size() == 0) {
		return false;
	}
	for(Diagnosis dia : data.getDiagnosis()) {
		if(icd9Exemption.equals(dia.getCode()))
			return true;
	}
	return false;
}

function String replaceCharAt(String s, int pos, char c) {
   return s.substring(0,pos) + c + s.substring(pos+1);
}

function String exemptionRareCodeCombining(String patCode, String redCode, int position) {
    String eco = decodeExemptionEconomic(redCode);
    if(patCode.length() == position){
        patCode += "0";
    }
    
    return replaceCharAt(patCode, position, eco.charAt(0));
}


//, 
// --------------  RULES -------------------------------
//
rule "150-Combining Patient Exemptions Q+R base"
dialect "java"
salience 100
when
    $validator : Validator(region == "150")
    $pat : Exemption( type == 'Q'&& (code.length() >= 5 || code.charAt(5) == '0'), $patCode : code, $description: description)
    $red : Exemption( $redCode : code, type == 'R', $redditoDes : description)
then
    LOGGER.info( "Combining Patient Exemptions Q+R base " );
    String description = $redditoDes +" + "+ $description;
    String newCode = exemptionRareCodeCombining($patCode, $redCode, 5);
	Exemption ex = $pat.clone();
	ex.setCode(newCode);
	ex.setType("C");
	ex.setDescription(description);
	if( LOGGER != null ) {
        LOGGER.info( "Combining Patient Exemptions Q+R base {}", ex );
	}
	insert(ex);
end
// Rare management common rule ( based on number)
rule "150-Combining Patient Exemptions Q+R (3° => 0)"
dialect "java"
salience 100
when
    $validator : Validator(region == "150")
    $pat : Exemption( type == 'Q', code.length() == 6 && code.charAt(3) == '0' && code.charAt(5) != '0', $patCode : code, $description: description)
    $red : Exemption( $redCode : code, type == 'R', $redditoDes : description)
then
    String description = $redditoDes +" + "+ $description;
    String newCode = exemptionRareCodeCombining($patCode, $redCode, 3);
	Exemption ex = $pat.clone();
	ex.setCode(newCode);
	ex.setType("C");
	ex.setDescription(description);
	if( LOGGER != null ) {
        LOGGER.info( "Combining Patient Exemptions Q+R (3° => 0) {}", ex );
	}
	insert(ex);
end

rule "150-Combining Patient Exemptions Q+R (2° => 0)"
dialect "java"
salience 100
when
    $validator : Validator(region == "150")
    $pat : Exemption(type == 'Q', code.length() == 6 && code.charAt(2) == '0' && code.charAt(3) != '0' && code.charAt(5) != '0', $patCode : code, $description: description)
    $red : Exemption( $redCode : code, type == 'R', $redditoDes : description)
then
    String description = $redditoDes +" + "+ $description;
    String newCode = null;
    
    if($patCode.equals("RF0111") && $redCode.equals("E12")){
        //special management
        newCode = "RFGF11"; 
    } else if ($patCode.equals("RF0111") && $redCode.equals("E22")){
        //special management
        newCode = "RFUF11"; 
    } else if($patCode.equals("RM0111") && $redCode.equals("E12")){
        //special management
        newCode = "RMGG11"; 
    } else if($patCode.equals("RM0111") && $redCode.equals("E22")){
        //special management
        newCode = "RMGU11"; 
    } else {
        newCode = exemptionRareCodeCombining($patCode, $redCode, 2);
    }
	Exemption ex = $pat.clone();
	ex.setCode(newCode);
	ex.setType("C");
	ex.setDescription(description);
	if( LOGGER != null ) {
        LOGGER.info( "Combining Patient Exemptions Q+R (2° => 0) {}", ex );
	}
	insert(ex);
end

rule "150-Combining Patient Exemptions Q+R (4° => 0)"
dialect "java"
salience 100
when
    $validator : Validator(region == "150")
    $pat : Exemption(  type == 'Q', code.length() == 6 && code.charAt(4) == '0' && code.charAt(2) != '0' && code.charAt(5) != '0', $patCode : code, $description: description)
    $red : Exemption( $redCode : code, type == 'R', $redditoDes : description)
then
    String description = $redditoDes +" + "+ $description;
    String newCode = exemptionRareCodeCombining($patCode, $redCode, 4);
   
	Exemption ex = $pat.clone();
	ex.setCode(newCode);
	ex.setType("C");
	ex.setDescription(description);
	if( LOGGER != null ) {
        LOGGER.info( "Combining Patient Exemptions Q+R (4° => 0) {}", ex );
	}
	insert(ex);
end

rule "150-Combining Patient Exemptions Q+R (3° =>  1 or 2)"
dialect "java"
salience 100
when
    $validator : Validator(region == "150")
    $pat : Exemption(  type == 'Q', code.length() == 6 &&
                      (code.charAt(3) == '1' || code.charAt(3) == '2') && code.charAt(4) != '0'  && code.charAt(5) != '0' && code.charAt(2) != '0', 
                      $patCode : code, $description: description)
    $red : Exemption( $redCode : code, type == 'R', $redditoDes : description)
then
    String description = $redditoDes +" + "+ $description;
    String newCode = null;
    
    if($patCode.equals("RCG161")){
       if($redCode.equals("E22")){
            //special management
            newCode = "RGU161";
       } else
        { //special cluster
        newCode = exemptionRareCodeCombining($patCode, $redCode, 1);
    } 
        
    }
    else if($patCode.equals("RNG251")){
         //special cluster
        newCode = exemptionRareCodeCombining($patCode, $redCode, 4);
    }
    else if($patCode.equals("RNG111")){
       if($redCode.equals("E14")){
            //special management
            newCode = "RNN111";
       } else if($redCode.equals("E24")){
            //special management
            newCode = "RNZ111";
       } else  if($redCode.equals("E22")){
            //special management
            newCode = "RGU111";
       } else {
        //special cluster
        newCode = exemptionRareCodeCombining($patCode, $redCode, 1);
       }
    }
    else if($patCode.equals("RNG271") && $redCode.equals("E03")){
        //special management
        newCode = "RNQ271";
    }
    else {
        // base rule management
        newCode = exemptionRareCodeCombining($patCode, $redCode, 3);
    }
	Exemption ex = $pat.clone();
	ex.setCode(newCode);
	ex.setType("C");
	ex.setDescription(description);
	if( LOGGER != null ) {
        LOGGER.info( "Combining Patient Exemptions Q+R (3° => 1 or 2) {}", ex );
	}
	insert(ex);
end

rule "150-Combining Patient Exemptions P+R"
dialect "java"
salience 100
when
	 $validator : Validator(region == "150")
	 $pat : Exemption($patCode : code, type == 'P', $description: description)
	 $red : Exemption( $redCode : code, type == 'R', $redditoDes : description)
then 
	String code = exemptionCodeCombining($patCode, $redCode);
	String description = $redditoDes +" + "+ $description;
	
	Exemption ex = $pat.clone();
	ex.setCode(code);
	ex.setType("C");
	ex.setDescription(description);
	if( LOGGER != null ) {
        LOGGER.info( "Combining Patient Exemptions P+R {}", ex );
	}
	insert(ex);
end


rule "150-Combining Patient Exemptions TOT"
dialect "java"
salience 100
when
	 $validator : Validator(region == "150")
	 $pat : Exemption($patCode : code, type == 'R' && code == 'E01', $description: description)
	 $red : Exemption( $redCode : code, $redditoDes : description, 
	 type == 'R' && (code == 'E10' || code == 'E11' || code == 'E12' || code == 'E13' || code == 'E20' || code == 'E21' || code == 'E22' || code == 'E23') )
then 
	String code = exemptionCodeCombining($patCode, $redCode);
	String description = $redditoDes +"+"+ $description;
	
	Exemption ex = $pat.clone();
	ex.setCode(code);
	ex.setType("T");
	ex.setDescription(description);
    if( LOGGER != null )
        LOGGER.info( "Combining Patient Exemptions TOT {}", ex );
	insert(ex);
end

//
// select available Exemption
//

rule "Select Patology Exemption on DRUG"
dialect "java"
salience 50
when
	$e : Exemption(	drugs.size() > 0 && (type == 'P' || type =='C'|| type =='Q'), $drugs : drugs)
	$d : Drug( type == 'F' && isGranted()==true && availableExemptions.size() == 0, $atc : atc, $current : exemption)
	$items: List(size > 0) from accumulate (
		$ei: ExemptionItem( $atc.startsWith(code) ) from $drugs;
		collectList($ei)
		)
then
    
	Exemption toAdd = $e.clone();
	if($d.getQuantity() > 1){
	    toAdd.setWeight(toAdd.getWeight() * 2);
	}
	
	int weight = toAdd.getWeight();
	toAdd.setRestrictionText(" - ");
	Boolean onProblem = null;
	
	for( int i = 0; i < $items.size(); i++) {
		ExemptionItem ei = (ExemptionItem)$items.get(i);
		if( ei.isWithRestriction() ){
			//curret have a restiction
			if( ei.isOnProblem() ){
				// need to prescribe on problem
				if((onProblem != null && onProblem) ||
					(onProblem == null && ( onProblem = isExemptionOnProblem(toAdd.getProblemCode(), $d)) == true)
				){
					//case.4 drug is prescribed on exemptionProblem
					toAdd.setWeight(weight);
					toAdd.setRestrictionText(null);
					break;
				} else {
					//case.3 doctor must validate but is worst
					toAdd.setWeight(-1);
					toAdd.setRestrictionText(ei.getRestriction());
				}
			} else {
				//case.2 doctor must validate but is preferred
				toAdd.setWeight(weight);
				toAdd.setRestrictionText(ei.getRestriction());
			}	
		} else {
			//case.1 exist a direct association without restriction
			toAdd.setWeight(weight);
			toAdd.setRestrictionText(null);
			break;
		}
	}
	//caso 1 e 4 sono i casi migliori, posso applicare senza chiedere assegnando il peso dell'esezionie
	//caso 2 propongo l'esenzione ma il medico deve validare
	//caso 3 metto l'esenzione con peso bassissimo
	//caso 2 e caso 3 possono generare ambiguità se ho 2 classi atc (una che copre l'altra con configurazioni di flag diverse)
	if(LOGGER != null)
        LOGGER.info( "Select Patology Exemption on DRUG {}",  toAdd );
	$d.getAvailableExemptions().add(toAdd);
	$d.setExemption(selectExemptionCriteria($current, toAdd));	
end

//
// select available Exemption on Procedure
//

rule "Select Patology Exemption on Procedure"
dialect "java"
salience 50
when
	$e : Exemption(	procedures.size() > 0 && (type == 'P' || type =='C' || type =='Q'), $procedures : procedures)
	$p : Procedure( isGranted()==true && availableExemptions.size() == 0, $cntCode : cntCode, $catalogueCode : catalogueCode,  $current : exemption)
	$items: List(size > 0) from accumulate (
		$ei: ExemptionItem( code==null || code.trim().isEmpty() || ($ei.isRegionalCode()?($catalogueCode.equals(code)):($cntCode.equals(code))) ) from $procedures;
		
		collectList($ei)
		)
then
    
	Exemption toAdd = $e.clone();
	
	
	int weight = toAdd.getWeight();
	toAdd.setRestrictionText(" - ");
	Boolean onProblem = null;
	
	for( int i = 0; i < $items.size(); i++) {
		ExemptionItem ei = (ExemptionItem)$items.get(i);
		  LOGGER.info( "iteem  " +  ei.getCode() );
		if( ei.isWithRestriction() ){
			//curret have a restiction
			if( ei.isOnProblem() ){
				// need to prescribe on problem
				if((onProblem != null && onProblem) ||
					(onProblem == null && ( onProblem = isExemptionOnProblem(toAdd.getProblemCode(), $p)) == true)
				){
					//case.4 drug is prescribed on exemptionProblem
					toAdd.setWeight(weight);
					toAdd.setRestrictionText(null);
					break;
				} else {
					//case.3 doctor must validate but is worst
					toAdd.setWeight(-1);
					toAdd.setRestrictionText(ei.getRestriction());
				}
			} else {
				//case.2 doctor must validate but is preferred
				toAdd.setWeight(weight);
				toAdd.setRestrictionText(ei.getRestriction());
			}	
		} else {
			//case.1 exist a direct association without restriction
			toAdd.setWeight(weight);
			toAdd.setRestrictionText(null);
			break;
		}
	}
	//caso 1 e 4 sono i casi migliori, posso applicare senza chiedere assegnando il peso dell'esezionie
	//caso 2 propongo l'esenzione ma il medico deve validare
	//caso 3 metto l'esenzione con peso bassissimo
	//caso 2 e caso 3 possono generare ambiguità se ho 2 classi atc (una che copre l'altra con configurazioni di flag diverse)
	if(LOGGER != null)
        LOGGER.info( "Select Patology Exemption on PROCEDURE {}",  toAdd );
	$p.getAvailableExemptions().add(toAdd);
	$p.setExemption(selectExemptionCriteria($current, toAdd));	
end

rule "select Economy Exemption"
salience 50
when
	$e : Exemption(type == 'R' || type =='T')
    $p : CommonDataInterface( type != 'admission' && isGranted()==true && availableExemptions.size() == 0, $current:exemption )
then
	Exemption toAdd = $e.clone();
	
	// economic exemption are applicable whenever
	toAdd.setRestrictionText(null);
	if(LOGGER != null)
        LOGGER.info( "Select Economy Exemption on CommonDataInterface {}",  toAdd );
	$p.getAvailableExemptions().add(toAdd);
	$p.setExemption(selectExemptionCriteria($current, toAdd));
end

rule "select TDL Exemption on Drug"
salience 50
when
	$e : Exemption(type == 'A' && code.startsWith("TDL"))
    $d : Drug( type == 'F' && isGranted()==true && availableExemptions.size() == 0 && drugFlags["tdl"] != null && drugFlags["tdl"] == true, $current : exemption)
then
	Exemption toAdd = $e.clone();
	
	// exemption is applicable 
	toAdd.setRestrictionText(null);
	if(LOGGER != null)
        LOGGER.info( "Select tdl Exemption on Drugs {}",  toAdd );
	$d.getAvailableExemptions().add(toAdd);
	
	if ($d.getDrugFlags().get("ZS") != null && $d.getDrugFlags().get("ZS") == true)
	{   toAdd.setWeight(90); }
	
	$d.setExemption(selectExemptionCriteria($current, toAdd));
	$d.getErrors().add(new Notification("EXE","validator.verifyExemptionSelection")); 
end


//
// verify selected Exemption
//eu.dedalus.prescriptionmodel.Drug( )eu.dedalus.prescriptionmodel.Drug( )

rule "verifyExemptionSelection"
salience 1
when
	$p : CommonDataInterface( type!='admission'&&
	            (checkFlags["exemptionValidation"] == null || checkFlags["exemptionValidation"] == false) ,
     		    $current : exemption
     		  )
	eval( $current != null && $current.isWithRestriction() )
then
    if(LOGGER != null)
        LOGGER.info( "verifyExemptionSelection has error {}", $current );
 	$p.getErrors().add(new Notification("EXE","validator.verifyExemptionSelection")); 
end

rule "empty exemption list"
when
    $c : CommonDataInterface( type!='admission' && isGranted()==false && availableExemptions.size() > 0, $current:exemption )
then
	if(LOGGER != null)
        LOGGER.info( "empty exemption list on CommonDataInterface {}",  $c );
	$c.getAvailableExemptions().clear();
	$c.setExemption(null);	
end
